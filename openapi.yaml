openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Token (Item) API #########################

  /v0.1/tokens/{tokenAddress}:
    get:
      tags:
        - token-controller
      description: "Returns Token by address"
      operationId: getTokenByAddress
      parameters:
        - name: "tokenAddress"
          in: path
          required: true
          description: "Token address in base58"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/tokens/{tokenAddress}/royalties":
    get:
      tags:
        - item-controller
      description: Returns item royalty by identifier
      operationId: getTokenRoyaltiesByAddress
      parameters:
        - name: "tokenAddress"
          in: path
          required: true
          description: "Token address in base58"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Royalties"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byIds:
    get:
      tags:
        - token-controller
      description: Returns the tokens by addresses
      operationId: getTokensByAddresses
      parameters:
        - name: tokenAddresses
          in: query
          description: "Addresses of the tokens"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/{tokenAddress}/meta:
    get:
      tags:
        - token-controller
      description: Returns the token meta by token address
      operationId: getTokenMetaByAddress
      parameters:
        - name: tokenAddress
          in: path
          description: "Token address in base58"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenMeta"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/tokens/{tokenAddress}/resetMeta":
    delete:
      tags:
        - item-controller
      description: "Deletes the NFT item meta by Id"
      operationId: resetTokenMeta
      parameters:
        - name: "tokenAddress"
          in: path
          required: true
          description: "Token address in base58"
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byCollection:
    get:
      tags:
        - token-controller
      description: Returns the tokens by collection
      operationId: getTokensByCollection
      parameters:
        - name: collection
          in: query
          description: "ID of the collection"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byOwner:
    get:
      tags:
        - token-controller
      description: Returns the tokens by owner
      operationId: getTokensByOwner
      parameters:
        - name: owner
          in: query
          description: "Owner of the token"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byCreator:
    get:
      tags:
        - token-controller
      description: Returns the tokens by creator
      operationId: getTokensByCreator
      parameters:
        - name: creator
          in: query
          description: "Creator of the token"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/all:
    get:
      tags:
        - token-controller
      description: "Returns all items"
      operationId: getAllTokens
      parameters:
        - name: "showDeleted"
          in: query
          required: false
          description: "Include deleted items"
          schema:
            type: boolean
        - name: "lastUpdatedFrom"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated after this date (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "lastUpdatedTo"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated before this date (timestamp)"
          schema:
            type: integer
            format: "int64"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Balance (Ownership) API #########################

  /v0.1/balances/{accountAddress}:
    get:
      tags:
        - balance-controller
      description: "Returns balance by account address"
      operationId: getBalanceByAccount
      parameters:
        - name: "accountAddress"
          in: path
          required: true
          description: "Account address in base58"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balance"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/balances/byMint:
    get:
      tags:
        - balance-controller
      description: "Returns balance by mint"
      operationId: getBalanceByMint
      parameters:
        - name: "mint"
          in: query
          required: true
          description: "Address of the mint"
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balances"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/balances/byOwner:
    get:
      tags:
        - balance-controller
      description: "Returns balance by owner"
      operationId: getBalanceByOwner
      parameters:
        - name: "owner"
          in: query
          required: true
          description: "Address of the owner"
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balances"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Collection API #######################

  /v0.1/collections/{collection}:
    get:
      tags:
        - collection-controller
      description: "Returns collection by address"
      operationId: getCollectionById
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/collections/{collection}/refreshMeta":
    delete:
      tags:
        - collection-controller
      description: "Refreshes metadata for all items in the NFT collection"
      operationId: refreshCollectionMeta
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/byOwner:
    get:
      tags:
        - collection-controller
      description: "Returns collection by owner"
      operationId: getCollectionsByOwner
      parameters:
        - name: "owner"
          in: query
          description: "Owner of searching collections"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/all:
    get:
      tags:
        - collection-controller
      description: "Returns all collections"
      operationId: getAllCollections
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    #################### Solana - Model ####################
    Token:
      type: object
      properties:
        address:
          type: string
        supply:
          $ref: "#/components/schemas/BigInteger"
        collection:
          type: string
        creators:
          type: array
          description: Creators of the token, may be empty, but if present, the 'share' sums up to 100
          items:
            "$ref": "#/components/schemas/TokenCreatorPart"
        decimals:
          type: integer
          format: int32
          description: The number of decimals places used in UI
        createdAt:
          type: string
          format: date-time
          description: "Datetime when the token was created"
        updatedAt:
          type: string
          format: date-time
          description: "Datetime when the token was updated"
        closed:
          type: boolean
      required:
        - address
        - supply
        - decimals
        - createdAt
        - updatedAt
        - closed

    Tokens:
      type: object
      properties:
        tokens:
          type: array
          description: "List of found tokens"
          default: [ ]
          items:
            $ref: "#/components/schemas/Token"
        continuation:
          type: string
          description: "Continuation token to paginate balances search result"
      required:
        - tokens

    Balance:
      required:
        - account
        - owner
        - mint
        - value
        - createdAt
        - updatedAt
      type: object
      properties:
        account:
          type: string
          description: Account address in base58
        owner:
          type: string
          description: Owner address in base58
        mint:
          type: string
          description: Token mint in base58
        collection:
          type: string
        createdAt:
          type: string
          format: date-time
          description: "Datetime when the token was created"
        updatedAt:
          type: string
          format: date-time
          description: "Datetime when the token was updated"
        value:
          "$ref": "#/components/schemas/BigInteger"

    Balances:
      type: object
      properties:
        balances:
          type: array
          description: "List of found balances"
          default: [ ]
          items:
            $ref: "#/components/schemas/Balance"
        continuation:
          type: string
          description: "Continuation token to paginate balances search result"
      required:
        - balances

#    Collection:
#      oneOf:
#        - $ref: "#/components/schemas/JsonCollection"
#        - $ref: "#/components/schemas/OnChainCollection"
#    JsonCollection:
#      type: object
#      description: Metaplex collection descriptor for version 1.0.0, which is stored in a remote JSON, see https://docs.metaplex.com/token-metadata/Versions/v1.0.0/nft-standard
#      required:
#        - name
#        - family
#        - hash
#      properties:
#        type:
#          type: string
#          enum:
#            - JSON_COLLECTION
#        name:
#          type: string
#        family:
#          type: string
#        hash:
#          description: Unique hash of the collection, helps to distinguish collections with the same name/family created by different minters
#          type: string
#    OnChainCollection:
#      type: object
#      description: Metaplex collection descriptor for version 1.1.0, which is stored on-chain, see https://docs.metaplex.com/token-metadata/Versions/v1.1.0/overview
#      required:
#        - address
#        - verified
#      properties:
#        address:
#          type: string
#        verified:
#          type: boolean
#        type:
#          type: string
#          enum:
#            - ON_CHAIN_COLLECTION

    Collection:
      type: object
      properties:
        address:
          type: string
        parent:
          type: string
        name:
          type: string
        symbol:
          type: string
        owner:
          type: string
        features:
          type: array
          default: [ ]
          items:
            type: string
            enum:
              - APPROVE_FOR_ALL
              - SET_URI_PREFIX
              - BURN
              - MINT_WITH_ADDRESS
              - SECONDARY_SALE_FEES
              - MINT_AND_TRANSFER
        creators:
          type: array
          description: "List of addresses that can mint items in this collection"
          items:
            type: string
        meta:
          "$ref": "#/components/schemas/CollectionMeta"
      required:
        - address
        - name
        - features

    Collections:
      type: object
      properties:
        collections:
          default: [ ]
          type: array
          items:
            $ref: "#/components/schemas/Collection"
        continuation:
          type: string
          description: "Continuation token to paginate collections search result"
      required:
        - collections

    CollectionMeta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the collection"
        description:
          type: string
          description: "Description of the collection"
        content:
          default: [ ]
          type: array
          items:
            "$ref": "#/components/schemas/TokenMetaContent"
        externalLink:
          type: string
          description: "External link to the original website for the collection"
        sellerFeeBasisPoints:
          type: integer
          format: int32
          description: "Indicates a 1% seller fee"
        feeRecipient:
          description: "Where seller fees will be paid to"
          type: string
      required:
        - name
        - content

    TokenMeta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the token"
        description:
          type: string
          description: "Description of the token"
        creators:
          type: array
          description: Creators of the token, may be empty, but if present, the 'share' sums up to 100
          items:
            "$ref": "#/components/schemas/TokenCreatorPart"
        attributes:
          type: array
          description: "Attributes of the token"
          items:
            "$ref": "#/components/schemas/TokenMetaAttribute"
        content:
          type: array
          description: "Token content information"
          items:
            $ref: "#/components/schemas/TokenMetaContent"
      required:
        - name
        - attributes
        - content

    TokenMetaAttribute:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        format:
          type: string

    TokenMetaContent:
      type: object
      properties:
        url:
          type: string
        representation:
          type: string
          enum:
            - PREVIEW
            - BIG
            - ORIGINAL
        mimeType:
          type: string
          example: "image/png"
        size:
          type: integer
          format: int64
      required:
        - url
        - representation
      oneOf:
        - $ref: "#/components/schemas/ImageContent"
        - $ref: "#/components/schemas/VideoContent"

    ImageContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMAGE
        width:
          type: integer
        height:
          type: integer

    VideoContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - VIDEO
        width:
          type: integer
        height:
          type: integer

    TokenCreatorPart:
      required:
        - address
        - share
      type: object
      properties:
        address:
          type: string
        share:
          type: integer

    Royalty:
      type: object
      properties:
        account:
          type: string
        value:
          type: integer
      required:
        - account
        - value

    Royalties:
      type: object
      properties:
        royalties:
          type: array
          items:
            $ref: "#/components/schemas/Royalty"
      required:
        - royalties

    #################### Solana - Events ####################

    TokenEvent:
      required:
        - eventId
        - address
      properties:
        eventId:
          type: string
        address:
          type: string
      oneOf:
        - $ref: "#/components/schemas/TokenUpdateEvent"
        - $ref: "#/components/schemas/TokenDeleteEvent"
    TokenUpdateEvent:
      type: object
      required:
        - token
      properties:
        type:
          type: string
          enum:
            - UPDATE
        token:
          $ref: "#/components/schemas/Token"
    TokenDeleteEvent:
      type: object
      required:
        - address
      properties:
        type:
          type: string
          enum:
            - DELETE

    BalanceEvent:
      required:
        - eventId
        - account
      properties:
        eventId:
          type: string
        account:
          description: Account address in base58
          type: string
      oneOf:
        - $ref: "#/components/schemas/BalanceUpdateEvent"
    BalanceUpdateEvent:
      type: object
      required:
        - balance
      properties:
        type:
          type: string
          enum:
            - UPDATE
        balance:
          $ref: "#/components/schemas/Balance"

    #################### Solana - Errors ####################

    SolanaApiErrorEntityNotFound:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
          default: NOT_FOUND
        message:
          type: string
          description: "Error message"

    SolanaApiErrorBadRequest:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - VALIDATION
          default: BAD_REQUEST
        message:
          type: string
          description: "Error message"

    SolanaApiErrorServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - UNKNOWN
          default: UNKNOWN
        message:
          type: string
          description: "Error message"

    #################### Referenced Types ####################

    BigInteger:
      type: string
      example: 123456
    BigDecimal:
      type: string
      example: 123456.789


  #======================== Responses ============================#

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorBadRequest"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorServerError"
    EntityNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorEntityNotFound"
