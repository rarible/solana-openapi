openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Sign API #########################

  "/v0.1/signature/validate":
    post:
      tags:
        - signature-controller
      description: "Validation of the order signature"
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolanaSignatureValidationForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  ######################### Token (Item) API #########################

  /v0.1/tokens/{tokenAddress}:
    get:
      tags:
        - token-controller
      description: "Returns Token by address"
      operationId: getTokenByAddress
      parameters:
        - name: "tokenAddress"
          in: path
          required: true
          description: "Token address in base58"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/tokens/{tokenAddress}/royalties":
    get:
      tags:
        - token-controller
      description: Returns item royalty by identifier
      operationId: getTokenRoyaltiesByAddress
      parameters:
        - name: "tokenAddress"
          in: path
          required: true
          description: "Token address in base58"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Royalties"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byIds:
    get:
      tags:
        - token-controller
      description: Returns the tokens by addresses
      operationId: getTokensByAddresses
      parameters:
        - name: tokenAddresses
          in: query
          description: "Addresses of the tokens"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/{tokenAddress}/meta:
    get:
      tags:
        - token-controller
      description: Returns the token meta by token address
      operationId: getTokenMetaByAddress
      parameters:
        - name: tokenAddress
          in: path
          description: "Token address in base58"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenMeta"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byCollection:
    get:
      tags:
        - token-controller
      description: Returns the tokens by collection
      operationId: getTokensByCollection
      parameters:
        - name: collection
          in: query
          description: "ID of the collection"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byOwner:
    get:
      tags:
        - token-controller
      description: Returns the tokens by owner
      operationId: getTokensByOwner
      parameters:
        - name: owner
          in: query
          description: "Owner of the token"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/byCreator:
    get:
      tags:
        - token-controller
      description: Returns the tokens by creator
      operationId: getTokensByCreator
      parameters:
        - name: creator
          in: query
          description: "Creator of the token"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/tokens/all:
    get:
      tags:
        - token-controller
      description: "Returns all items"
      operationId: getAllTokens
      parameters:
        - name: "showDeleted"
          in: query
          required: false
          description: "Include deleted items"
          schema:
            type: boolean
        - name: "lastUpdatedFrom"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated after this date (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "lastUpdatedTo"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated before this date (timestamp)"
          schema:
            type: integer
            format: "int64"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  ######################### Balance (Ownership) API #########################

  /v0.1/balances/byMint:
    get:
      tags:
        - balance-controller
      description: "Returns balance by mint"
      operationId: getBalanceByMint
      parameters:
        - name: "mint"
          in: query
          required: true
          description: "Address of the mint"
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balances"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/balances/byOwner:
    get:
      tags:
        - balance-controller
      description: "Returns balance by owner"
      operationId: getBalanceByOwner
      parameters:
        - name: "owner"
          in: query
          required: true
          description: "Address of the owner"
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balances"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/balances/byMintAndOwner:
    get:
      tags:
        - balance-controller
      deprecated: true
      description: "Use byOwnerAndMint"
      operationId: getBalanceByMintAndOwner
      parameters:
        - name: "mint"
          in: query
          required: true
          schema:
            type: string
        - name: "owner"
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balance"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/balances/byOwnerAndMint:
    get:
      tags:
        - balance-controller
      description: "Returns balances by mint/owner pair"
      operationId: getBalancesByMintAndOwner
      parameters:
        - name: "mint"
          in: query
          required: true
          schema:
            type: string
        - name: "owner"
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Balances"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  ####################### Collection API #######################

  /v0.1/collections/{collection}:
    get:
      tags:
        - collection-controller
      description: "Returns collection by address"
      operationId: getCollectionById
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/collections/{collection}/refreshMeta":
    delete:
      tags:
        - collection-controller
      description: "Refreshes metadata for all items in the NFT collection"
      operationId: refreshCollectionMeta
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            type: string
      responses:
        '200':
          description: OK
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/byOwner:
    get:
      tags:
        - collection-controller
      description: "Returns collection by owner"
      operationId: getCollectionsByOwner
      parameters:
        - name: "owner"
          in: query
          description: "Owner of searching collections"
          required: true
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/all:
    get:
      tags:
        - collection-controller
      description: "Returns all collections"
      operationId: getAllCollections
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  ######################## Activity API ########################

  /v0.1/activities/search:
    post:
      tags:
        - activity-controller
      description: "Returns activities by specified filter"
      operationId: searchActivities
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
        - name: "sort"
          in: query
          required: false
          description: "Sorting activity time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityFilter"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/sync:
    get:
      tags:
        - activity-controller
      description: "Returns activities by specified filter"
      operationId: getActivitiesSync
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
        - name: "sort"
          in: query
          required: false
          description: "Sorting activity time"
          schema:
            "$ref": "#/components/schemas/SyncSort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byIds:
    post:
      tags:
        - activity-controller
      description: "Returns activities by ids"
      operationId: searchActivitiesByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivitiesByIdRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  ######################## Order API ########################

  "/v0.1/orders/{id}":
    get:
      tags:
        - order-controller
      description: "Returns order by Id"
      operationId: getOrderById
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Order ID"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byIds":
    post:
      tags:
        - order-controller
      description: "Returns the orders by specified IDs"
      operationId: getOrdersByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/all":
    get:
      tags:
        - order-controller
      description: "Returns all orders"
      operationId: getOrdersAll
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Order sort"
          schema:
            $ref: "#/components/schemas/OrderSort"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sync":
    get:
      tags:
        - order-controller
      description: "Returns all orders sorted by data base update"
      operationId: getOrdersSync
      parameters:
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Order sort"
          schema:
            $ref: "#/components/schemas/SyncSort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sellCurrencies":
    get:
      tags:
        - order-controller
      operationId: getSellCurrencies
      description: Returns currencies taken as payment in all sell orders of the item
      parameters:
        - name: "itemId"
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/OrderCurrenciesPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell":
    get:
      tags:
        - order-controller
      description: "Returns all sell orders"
      operationId: getSellOrders
      parameters:
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            type: string
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byItem":
    get:
      tags:
        - order-controller
      operationId: getSellOrdersByItem
      description: Returns all orders for sale by item and order status
      parameters:
        - name: "itemId"
          in: query
          required: true
          schema:
            type: string
        - name: "currencyId"
          in: query
          required: true
          schema:
            type: string
        - name: "maker"
          description: "The makers of the order"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: "origin"
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: "The order status"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/sell/byMaker":
    get:
      tags:
        - order-controller
      description: "Returns sell orders by maker"
      operationId: getSellOrdersByMaker
      parameters:
        - name: "maker"
          in: query
          required: true
          description: "The maker of the order"
          schema:
            type: string
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            type: string
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/bidCurrencies":
    get:
      tags:
        - order-controller
      operationId: getBidCurrencies
      description: Returns currencies made as payment in all bid orders of the item
      parameters:
        - name: "itemId"
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: "#/components/responses/OrderCurrenciesPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/bids/byItem":
    get:
      tags:
        - order-controller
      operationId: getOrderBidsByItem
      description: Returns all order bids by item and order status
      parameters:
        - name: "itemId"
          in: query
          required: true
          schema:
            type: string
        - name: "currencyId"
          in: query
          required: true
          schema:
            type: string
        - name: "maker"
          description: "The makers of the orders"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: "origin"
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: "The order status"
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: start
          description: "Lower time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: end
          description: "Upper time border of data (unix format)"
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of orders to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/bids/byMaker":
    get:
      tags:
        - order-controller
      description: "Returns order bids by maker"
      operationId: getOrderBidsByMaker
      parameters:
        - name: "maker"
          in: query
          required: true
          description: "The maker of the order"
          schema:
            type: string
        - name: "origin"
          in: query
          required: false
          schema:
            type: string
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "start"
          in: query
          required: false
          description: "Lower time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "end"
          in: query
          required: false
          description: "Upper time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  schemas:

    #################### Solana - Sign Model ####################
    SolanaSignatureValidationForm:
      required:
        - signer
        - message
        - signature
      type: object
      properties:
        signer:
          type: string
        publicKey:
          type: string
          description: "The creator's public key"
        message:
          type: string
        signature:
          type: string
          description: "Digital signature of the signer"

    #################### Solana - Token Model ####################
    Token:
      type: object
      properties:
        address:
          type: string
        supply:
          $ref: "#/components/schemas/BigInteger"
        collection:
          type: string
        creators:
          type: array
          description: Creators of the token, may be empty, but if present, the 'share' sums up to 100
          items:
            "$ref": "#/components/schemas/TokenCreatorPart"
        decimals:
          type: integer
          format: int32
          description: The number of decimals places used in UI
        createdAt:
          type: string
          format: date-time
          description: "Datetime when the token was created"
        updatedAt:
          type: string
          format: date-time
          description: "Datetime when the token was updated"
        closed:
          type: boolean
      required:
        - address
        - supply
        - decimals
        - createdAt
        - updatedAt
        - closed

    Tokens:
      type: object
      properties:
        tokens:
          type: array
          description: "List of found tokens"
          default: [ ]
          items:
            $ref: "#/components/schemas/Token"
        continuation:
          type: string
          description: "Continuation token to paginate balances search result"
      required:
        - tokens

    TokenMeta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the token"
        description:
          type: string
          description: "Description of the token"
        creators:
          type: array
          description: Creators of the token, may be empty, but if present, the 'share' sums up to 100
          items:
            "$ref": "#/components/schemas/TokenCreatorPart"
        attributes:
          type: array
          description: "Attributes of the token"
          items:
            "$ref": "#/components/schemas/TokenMetaAttribute"
        content:
          type: array
          description: "Token content information"
          items:
            $ref: "#/components/schemas/TokenMetaContent"
      required:
        - name
        - attributes
        - content

    TokenMetaAttribute:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        format:
          type: string

    TokenMetaContent:
      type: object
      properties:
        url:
          type: string
        representation:
          type: string
          enum:
            - PREVIEW
            - BIG
            - ORIGINAL
        mimeType:
          type: string
          example: "image/png"
        size:
          type: integer
          format: int64
      required:
        - url
        - representation
      oneOf:
        - $ref: "#/components/schemas/ImageContent"
        - $ref: "#/components/schemas/VideoContent"

    ImageContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMAGE
        width:
          type: integer
        height:
          type: integer

    VideoContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - VIDEO
        width:
          type: integer
        height:
          type: integer

    TokenCreatorPart:
      required:
        - address
        - share
      type: object
      properties:
        address:
          type: string
        share:
          type: integer

    #################### Solana - Balance Model ####################
    Balance:
      required:
        - account
        - owner
        - mint
        - value
        - createdAt
        - updatedAt
      type: object
      properties:
        account:
          type: string
          description: Account address in base58
        owner:
          type: string
          description: Owner address in base58
        mint:
          type: string
          description: Token mint in base58
        isAssociatedTokenAccount:
          type: boolean
          description: Whether this token account is the Associated Token Account
        collection:
          type: string
        createdAt:
          type: string
          format: date-time
          description: "Datetime when the token was created"
        updatedAt:
          type: string
          format: date-time
          description: "Datetime when the token was updated"
        value:
          "$ref": "#/components/schemas/BigInteger"

    Balances:
      type: object
      properties:
        balances:
          type: array
          description: "List of found balances"
          default: [ ]
          items:
            $ref: "#/components/schemas/Balance"
        continuation:
          type: string
          description: "Continuation token to paginate balances search result"
      required:
        - balances

    #################### Solana - Collection Model ####################
    Collection:
      type: object
      properties:
        address:
          type: string
        parent:
          type: string
        name:
          type: string
        symbol:
          type: string
        owner:
          type: string
        features:
          type: array
          default: [ ]
          items:
            type: string
            enum:
              - APPROVE_FOR_ALL
              - SET_URI_PREFIX
              - BURN
              - MINT_WITH_ADDRESS
              - SECONDARY_SALE_FEES
              - MINT_AND_TRANSFER
        creators:
          type: array
          description: "List of addresses that can mint items in this collection"
          items:
            type: string
        meta:
          "$ref": "#/components/schemas/CollectionMeta"
      required:
        - address
        - name
        - features

    Collections:
      type: object
      properties:
        collections:
          default: [ ]
          type: array
          items:
            $ref: "#/components/schemas/Collection"
        continuation:
          type: string
          description: "Continuation token to paginate collections search result"
      required:
        - collections

    CollectionMeta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the collection"
        description:
          type: string
          description: "Description of the collection"
        content:
          default: [ ]
          type: array
          items:
            "$ref": "#/components/schemas/TokenMetaContent"
        externalLink:
          type: string
          description: "External link to the original website for the collection"
        sellerFeeBasisPoints:
          type: integer
          format: int32
          description: "Indicates a 1% seller fee"
        feeRecipient:
          description: "Where seller fees will be paid to"
          type: string
      required:
        - name
        - content

    #################### Solana - Order Model ####################
    Order:
      type: object
      required:
        - maker
        - make
        - take
        - fill
        - status
        - createdAt
        - updatedAt
        - hash
      properties:
        auctionHouseFee:
          type: integer
        auctionHouseRequiresSignOff:
          type: boolean
        maker:
          type: string
        make:
          $ref: "#/components/schemas/Asset"
        makePrice:
          $ref: "#/components/schemas/BigDecimal"
        take:
          $ref: "#/components/schemas/Asset"
        takePrice:
          $ref: "#/components/schemas/BigDecimal"
        makeStock:
          $ref: "#/components/schemas/BigDecimal"
        fill:
          $ref: "#/components/schemas/BigDecimal"
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        dbUpdatedAt:
          type: string
          format: date-time
        hash:
          type: string
        status:
          $ref: "#/components/schemas/OrderStatus"
      oneOf:
        - "$ref": "#/components/schemas/AuctionHouseOrder"

    Orders:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate orders search result"
        orders:
          type: array
          description: "List of found orders"
          default: [ ]
          items:
            $ref: "#/components/schemas/Order"
      required:
        - orders

    OrderCurrencies:
      type: object
      description: List of distinct currencies in which payments for sell or bid orders were suggested
      properties:
        currencies:
          type: array
          items:
            $ref: "#/components/schemas/AssetType"
      required:
        - currencies

    OrderIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string

    AuctionHouseOrder:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - AUCTION_HOUSE
        data:
          $ref: "#/components/schemas/AuctionHouseOrderOrderData"

    AuctionHouseOrderOrderData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/AuctionHouseOrderDataV1"

    AuctionHouseOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - AUCTION_HOUSE_ORDER_DATA_V1
        auctionHouse:
          type: string
      required:
        - "@type"
        - auctionHouse

    OrderStatus:
      type: string
      enum:
        - ACTIVE
        - FILLED
        - CANCELLED
        - INACTIVE

    Asset:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - type
        - value

    AssetType:
      type: object
      oneOf:
        - $ref: "#/components/schemas/SolanaSolAssetType"
        - $ref: "#/components/schemas/SolanaNftAssetType"
        - $ref: "#/components/schemas/SolanaFtAssetType"

    SolanaNftAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_NFT
        mint:
          type: string
      required:
        - "@type"
        - mint

    SolanaSolAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_SOL
      required:
        - "@type"

    SolanaFtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_FT
        mint:
          type: string
      required:
        - "@type"
        - mint

    Royalty:
      type: object
      properties:
        account:
          type: string
        value:
          type: integer
      required:
        - account
        - value

    Royalties:
      type: object
      properties:
        royalties:
          type: array
          items:
            $ref: "#/components/schemas/Royalty"
      required:
        - royalties

    #################### Solana - Activity Model ####################

    ActivitySort:
      type: string
      enum:
        - LATEST_FIRST
        - EARLIEST_FIRST

    ActivityFilter:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ActivityFilterAll"
        - $ref: "#/components/schemas/ActivityFilterByUser"
        - $ref: "#/components/schemas/ActivityFilterByItem"
        - $ref: "#/components/schemas/ActivityFilterByCollection"

    ActivityFilterAll:
      type: object
      required:
        - "@type"
        - types
      properties:
        "@type":
          type: string
          enum:
            - "all"
        types:
          type: array
          items:
            $ref: "#/components/schemas/ActivityFilterAllType"

    ActivityFilterAllType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_BID
        - CANCEL_LIST

    ActivityFilterByUser:
      type: object
      required:
        - "@type"
        - types
        - users
      properties:
        "@type":
          type: string
          enum:
            - "by_user"
        users:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            $ref: "#/components/schemas/ActivityFilterByUserType"
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time

    ActivityFilterByUserType:
      type: string
      enum:
        - TRANSFER_FROM
        - TRANSFER_TO
        - MINT
        - BURN
        - MAKE_BID
        - GET_BID
        - LIST
        - BUY
        - SELL
        - CANCEL_BID
        - CANCEL_LIST

    ActivityFilterByItem:
      type: object
      required:
        - "@type"
        - itemId
        - types
      properties:
        "@type":
          type: string
          enum:
            - "by_item"
        itemId:
          type: string
        types:
          type: array
          items:
            $ref: "#/components/schemas/ActivityFilterByItemType"

    ActivityFilterByItemType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_BID
        - CANCEL_LIST

    ActivityFilterByCollection:
      type: object
      required:
        - "@type"
        - collection
        - types
      properties:
        "@type":
          type: string
          enum:
            - "by_collection"
        collection:
          type: string
        types:
          type: array
          items:
            $ref: "#/components/schemas/ActivityFilterByCollectionType"

    ActivityFilterByCollectionType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_BID
        - CANCEL_LIST

    ActivityType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    UserActivityType:
      type: string
      enum:
        - TRANSFER_FROM
        - TRANSFER_TO
        - MINT
        - BURN
        - MAKE_BID
        - GET_BID
        - LIST
        - BUY
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    ActivitiesByIdRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
            description: "List of activity ids"

    Activities:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate activities search result"
        activities:
          type: array
          default: [ ]
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/Activity"
      required:
        - activities

    Activity:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: "date-time"
        dbUpdatedAt:
          type: string
          format: "date-time"
        reverted:
          type: boolean
      oneOf:
        - $ref: "#/components/schemas/MintActivity"
        - $ref: "#/components/schemas/BurnActivity"
        - $ref: "#/components/schemas/TransferActivity"
        - $ref: "#/components/schemas/OrderMatchActivity"
        - $ref: "#/components/schemas/OrderListActivity"
        - $ref: "#/components/schemas/OrderCancelListActivity"
        - $ref: "#/components/schemas/OrderBidActivity"
        - $ref: "#/components/schemas/OrderCancelBidActivity"
      required:
        - id
        - date
        - reverted

    MintActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MINT
        owner:
          type: string
        tokenAddress:
          type: string
        value:
          $ref: "#/components/schemas/BigInteger"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - tokenAddress
        - value
        - blockchainInfo

    BurnActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BURN
        owner:
          type: string
        tokenAddress:
          type: string
        value:
          $ref: "#/components/schemas/BigInteger"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - tokenAddress
        - value
        - blockchainInfo

    TransferActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          type: string
        owner:
          type: string
        tokenAddress:
          type: string
        value:
          $ref: "#/components/schemas/BigInteger"
        purchase:
          type: boolean
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - from
        - owner
        - tokenAddress
        - value
        - purchase
        - transactionHash
        - blockchainInfo

    OrderMatchActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SELL
        nft:
          $ref: "#/components/schemas/Asset"
        payment:
          $ref: "#/components/schemas/Asset"
        buyer:
          type: string
        seller:
          type: string
        buyerOrderHash:
          type: string
        sellerOrderHash:
          type: string
        price:
          $ref: "#/components/schemas/BigDecimal"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
        type:
          type: string
          enum:
            - SELL
            - ACCEPT_BID
      required:
        - nft
        - payment
        - price
        - type
        - buyer
        - seller
        - blockchainInfo

    OrderListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - LIST
        hash:
          type: string
        maker:
          type: string
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price
        - blockchainInfo

    OrderCancelListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_LIST
        hash:
          type: string
        maker:
          type: string
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - blockchainInfo

    OrderBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BID
        hash:
          type: string
        maker:
          type: string
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price
        - blockchainInfo

    OrderCancelBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_BID
        hash:
          type: string
        maker:
          type: string
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - blockchainInfo

    ActivityBlockchainInfo:
      type: object
      deprecated: true
      properties:
        blockNumber:
          type: integer
          format: int64
        blockHash:
          type: string
        transactionIndex:
          type: integer
          format: int32
        transactionHash:
          type: string
        instructionIndex:
          type: integer
          format: int32
        innerInstructionIndex:
          type: integer
          format: int32
          default: null
      required:
        - blockNumber
        - blockHash
        - transactionIndex
        - transactionHash
        - instructionIndex

    #################### Solana - Events ####################

    TokenEvent:
      required:
        - eventId
        - address
      properties:
        eventId:
          type: string
        address:
          type: string
      oneOf:
        - $ref: "#/components/schemas/TokenUpdateEvent"
        - $ref: "#/components/schemas/TokenDeleteEvent"

    TokenUpdateEvent:
      type: object
      required:
        - token
      properties:
        type:
          type: string
          enum:
            - UPDATE
        token:
          $ref: "#/components/schemas/Token"

    TokenDeleteEvent:
      type: object
      required:
        - address
      properties:
        type:
          type: string
          enum:
            - DELETE

    BalanceEvent:
      required:
        - eventId
        - account
        - mint
      properties:
        eventId:
          type: string
        account:
          description: Account address in base58
          type: string
        mint:
          type: string
          description: Token address in base58 to which the account belongs
      oneOf:
        - $ref: "#/components/schemas/BalanceUpdateEvent"
        - $ref: "#/components/schemas/BalanceDeleteEvent"

    BalanceUpdateEvent:
      type: object
      required:
        - balance
      properties:
        type:
          type: string
          enum:
            - UPDATE
        balance:
          $ref: "#/components/schemas/Balance"

    BalanceDeleteEvent:
      type: object
      required:
        - balance
      properties:
        type:
          type: string
          enum:
            - DELETE
        balance:
          $ref: "#/components/schemas/Balance"

    CollectionEvent:
      required:
        - eventId
        - collectionId
      properties:
        eventId:
          type: string
        collectionId:
          type: string
      oneOf:
        - $ref: '#/components/schemas/CollectionUpdateEvent'

    CollectionUpdateEvent:
      type: object
      required:
        - collection
      properties:
        type:
          type: string
          enum:
            - UPDATE
        collection:
          $ref: '#/components/schemas/Collection'

    OrderEvent:
      type: object
      required:
        - eventId
        - orderId
      properties:
        eventId:
          type: string
        orderId:
          type: string
      oneOf:
        - "$ref": "#/components/schemas/OrderUpdateEvent"

    OrderUpdateEvent:
      type: object
      required:
        - order
      properties:
        type:
          type: string
          enum:
            - UPDATE
        order:
          "$ref": "#/components/schemas/Order"

    TokenMetaEvent:
      required:
        - tokenAddress
      properties:
        tokenAddress:
          type: string
      oneOf:
        - $ref: "#/components/schemas/TokenMetaTriggerEvent"
        - $ref: "#/components/schemas/TokenMetaUpdateEvent"

    TokenMetaTriggerEvent:
      type: object
      properties:
        type:
          type: string
          enum:
            - TRIGGER

    TokenMetaUpdateEvent:
      type: object
      required:
        - tokenMeta
      properties:
        type:
          type: string
          enum:
            - UPDATE
        tokenMeta:
          $ref: "#/components/schemas/TokenMeta"

    #################### Solana - Errors ####################

    SolanaApiErrorEntityNotFound:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
          default: NOT_FOUND
        message:
          type: string
          description: "Error message"

    SolanaApiErrorBadRequest:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - VALIDATION
          default: BAD_REQUEST
        message:
          type: string
          description: "Error message"

    SolanaApiErrorServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - UNKNOWN
          default: UNKNOWN
        message:
          type: string
          description: "Error message"

    #################### Referenced Types ####################

    BigInteger:
      type: string
      example: 123456
    BigDecimal:
      type: string
      example: 123456.789

    OrderSort:
      type: string
      enum:
        - LAST_UPDATE_ASC
        - LAST_UPDATE_DESC

    SyncSort:
      type: string
      enum:
        - DB_UPDATE_ASC
        - DB_UPDATE_DESC

  #======================== Responses ============================#

  responses:
    OrderPage:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Orders"
    OrderCurrenciesPage:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderCurrencies"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorBadRequest"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorServerError"
    EntityNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/SolanaApiErrorEntityNotFound"
